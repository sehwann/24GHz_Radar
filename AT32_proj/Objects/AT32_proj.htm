<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AT32_proj.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AT32_proj.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri May 26 15:24:10 2023
<BR><P>
<H3>Maximum Stack Usage =        456 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
taskMain &rArr; rs_get_distance &rArr; get_distance_data &rArr; conv_power &rArr; __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[46]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">ACC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[46]">ACC_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[43]">CAN2_RX0_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[44]">CAN2_RX1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[45]">CAN2_SCE_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[42]">CAN2_TX_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel3_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel4_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel5_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel6_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel7_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel2_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[40]">DMA2_Channel3_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[41]">DMA2_Channel4_5_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[49]">DMA2_Channel6_7_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[34]">RTCAlarm_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3a]">SDIO_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_at32f4xx.o(i.SystemInit) referenced from startup_at32f413rx_hd.o(.text)
 <LI><a href="#[d]">TAMPER_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[23]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[26]">TMR1_CC_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[24]">TMR1_OV_TMR10_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[25]">TMR1_TRG_COM_TMR11_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[27]">TMR2_GLOBAL_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[28]">TMR3_GLOBAL_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[29]">TMR4_GLOBAL_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3b]">TMR5_GLOBAL_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[36]">TMR8_BRK_TMR12_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[39]">TMR8_CC_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[37]">TMR8_OV_TMR13_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[38]">TMR8_TRG_COM_TMR14_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3c]">UART4_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[3d]">UART5_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[35]">USBWakeUp_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1e]">USB_HP_CAN1_TX_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[47]">USB_HP_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[1f]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[48]">USB_LP_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_at32f413rx_hd.o(.text) referenced from startup_at32f413rx_hd.o(RESET)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_at32f413rx_hd.o(.text)
 <LI><a href="#[4d]">fputc</a> from at32_board.o(i.fputc) referenced from printf1.o(i.__0printf$1)
 <LI><a href="#[4a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[50]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[4f]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[4e]">taskMain</a> from main.o(i.taskMain) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[51]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[fa]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[fb]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[fc]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[fd]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[f4]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TMR1_OV_TMR10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR1_TRG_COM_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TMR8_BRK_TMR12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TMR8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TMR8_OV_TMR13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TMR8_TRG_COM_TMR14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f413rx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_regs
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_get_distance
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_devdata
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_open
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5a]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = calloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_regs
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem_seq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_effective_chirp_bandwidth
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_power
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_point_per_chirp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_effective_chirp_bandwidth
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_point_per_chirp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_effective_chirp_bandwidth
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_power
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_power
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_point_per_chirp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_point_per_chirp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_effective_chirp_bandwidth
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[104]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[105]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[107]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[68]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>

<P><STRONG><a name="[52]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[108]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[109]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>AT32F413_SC1233_INIT</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main_at32f4xx.o(i.AT32F413_SC1233_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AT32F413_SC1233_INIT &rArr; UART_Configuration &rArr; USART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>CE_OFF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sc123x_gpio.o(i.CE_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_chipinit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_shutdown
</UL>

<P><STRONG><a name="[c7]"></a>CE_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sc123x_gpio.o(i.CE_ON))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_chipinit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_boot
</UL>

<P><STRONG><a name="[6d]"></a>GPIO_Configuration</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, main_at32f4xx.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32F413_SC1233_INIT
</UL>

<P><STRONG><a name="[71]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, at32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[f0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMain
</UL>

<P><STRONG><a name="[70]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[ce]"></a>I2C_OFF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sc123x_gpio.o(i.I2C_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_chipinit
</UL>

<P><STRONG><a name="[cd]"></a>NRST_OFF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sc123x_gpio.o(i.NRST_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_chipinit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_shutdown
</UL>

<P><STRONG><a name="[c9]"></a>NRST_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sc123x_gpio.o(i.NRST_ON))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_chipinit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_boot
</UL>

<P><STRONG><a name="[cf]"></a>NSS_HIGH</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sc123x_gpio.o(i.NSS_HIGH))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_chipinit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem_seq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>

<P><STRONG><a name="[d5]"></a>NSS_LOW</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sc123x_gpio.o(i.NSS_LOW))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem_seq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>

<P><STRONG><a name="[73]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[72]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[6c]"></a>RCC_Configuration</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main_at32f4xx.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32F413_SC1233_INIT
</UL>

<P><STRONG><a name="[7c]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 326 bytes, Stack size 20 bytes, at32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[6f]"></a>SPI_Configuration</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main_at32f4xx.o(i.SPI_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Configuration &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DefaultInitParaConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32F413_SC1233_INIT
</UL>

<P><STRONG><a name="[74]"></a>SPI_DefaultInitParaConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_DefaultInitParaConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[76]"></a>SPI_Enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[d6]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem_seq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>

<P><STRONG><a name="[d8]"></a>SPI_I2S_RxData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_RxData))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>

<P><STRONG><a name="[d7]"></a>SPI_I2S_TxData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_TxData))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem_seq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>

<P><STRONG><a name="[75]"></a>SPI_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, at32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, system_at32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f413rx_hd.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>UART_Configuration</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main_at32f4xx.o(i.UART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_Configuration &rArr; USART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32F413_SC1233_INIT
</UL>

<P><STRONG><a name="[7b]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[9b]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7a]"></a>USART_Init</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, at32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[9a]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[79]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[7d]"></a>__0printf$1</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10a]"></a>__1printf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1), UNUSED)

<P><STRONG><a name="[f1]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0printf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMain
</UL>

<P><STRONG><a name="[7f]"></a>__hardfp_ceil</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, ceil.o(i.__hardfp_ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range
</UL>

<P><STRONG><a name="[81]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range
</UL>

<P><STRONG><a name="[82]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[89]"></a>__hardfp_log10</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, log10.o(i.__hardfp_log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_power
</UL>

<P><STRONG><a name="[8b]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_point_per_chirp
</UL>

<P><STRONG><a name="[88]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[86]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[83]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[85]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[10b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[84]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[8d]"></a>_effective_chirp_bandwidth</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, rs_ctl_setup.o(i._effective_chirp_bandwidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _effective_chirp_bandwidth &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_point_per_chirp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range
</UL>

<P><STRONG><a name="[8e]"></a>_point_per_chirp</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, rs_ctl_setup.o(i._point_per_chirp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _point_per_chirp &rArr; __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_effective_chirp_bandwidth
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range
</UL>

<P><STRONG><a name="[ea]"></a>_table_read_reg</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rs_ctl_setup.o(i._table_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _table_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_getcode
</UL>

<P><STRONG><a name="[93]"></a>distance_wide_get</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rs_ctl_distance.o(i.distance_wide_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = distance_wide_get &rArr; rs_setup_getcode &rArr; _table_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_getcode
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_param_local
</UL>

<P><STRONG><a name="[95]"></a>distance_wide_update_param</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rs_ctl_distance.o(i.distance_wide_update_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = distance_wide_update_param &rArr; rs_setup_range_peak &rArr; rs_setup_range &rArr; _point_per_chirp &rArr; __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_interval
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_hpf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range_peak
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_beta
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_update_param_local
</UL>

<P><STRONG><a name="[4d]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at32_board.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0printf$1)
</UL>
<P><STRONG><a name="[d9]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_sensor_data_free
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_regs
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem_seq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>

<P><STRONG><a name="[9c]"></a>get_devdata</STRONG> (Thumb, 120 bytes, Stack size 112 bytes, rs_ctl_distance.o(i.get_devdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = get_devdata &rArr; rs_ctl_cmd_wait_and_get_sensor_data &rArr; read_register &rArr; rs_ctl_read_reg &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_sensor_data_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_sensor_data_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_wait_and_get_sensor_data
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_get_distance
</UL>

<P><STRONG><a name="[a1]"></a>get_distance_data</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, rs_ctl_distance.o(i.get_distance_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = get_distance_data &rArr; conv_power &rArr; __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distance_range
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_power
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_get_distance
</UL>

<P><STRONG><a name="[a3]"></a>get_expected_crc</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, general.o(i.get_expected_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_expected_crc &rArr; rs_calc_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_calc_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_seq
</UL>

<P><STRONG><a name="[8a]"></a>log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT32F413_SC1233_INIT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5b]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[b6]"></a>pvPortMalloc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[b4]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[bb]"></a>read_fifo</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rs_ctl_distance.o(i.read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = read_fifo &rArr; rs_ctl_op_read_region &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_read_region
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_wait_and_get_sensor_data
</UL>

<P><STRONG><a name="[bd]"></a>read_modify_write_reg</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rs_ctl_dev.o(i.read_modify_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = read_modify_write_reg &rArr; rs_ctl_write_regs &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_regs
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_interval
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_hpf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_beta
</UL>

<P><STRONG><a name="[bf]"></a>read_register</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rs_ctl_distance.o(i.read_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = read_register &rArr; rs_ctl_read_reg &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_reg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_UPDDT
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_HLDDT
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_wait_and_get_sensor_data
</UL>

<P><STRONG><a name="[c3]"></a>read_status</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rs_ctl_distance.o(i.read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = read_status &rArr; rs_ctl_op_RDSR2 &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_RDSR2
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_wait_and_get_sensor_data
</UL>

<P><STRONG><a name="[a4]"></a>rs_calc_crc16</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, general.o(i.rs_calc_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rs_calc_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_expected_crc
</UL>

<P><STRONG><a name="[c5]"></a>rs_ctl_cmd_boot</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rs_ctl_cmd.o(i.rs_ctl_cmd_boot))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rs_ctl_cmd_boot &rArr; rs_ctl_read_reg &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_reg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRST_ON
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_ON
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_chipinit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_reg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_SRST
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_open
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_load_seq_code
</UL>

<P><STRONG><a name="[c6]"></a>rs_ctl_cmd_chipinit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rs_ctl_cmd.o(i.rs_ctl_cmd_chipinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rs_ctl_cmd_chipinit &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NSS_HIGH
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRST_ON
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRST_OFF
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OFF
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_ON
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_OFF
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_boot
</UL>

<P><STRONG><a name="[d0]"></a>rs_ctl_cmd_disable_seq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rs_ctl_cmd.o(i.rs_ctl_cmd_disable_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rs_ctl_cmd_disable_seq &rArr; rs_ctl_write_reg &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_seq
</UL>

<P><STRONG><a name="[d1]"></a>rs_ctl_cmd_enable_seq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rs_ctl_cmd.o(i.rs_ctl_cmd_enable_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rs_ctl_cmd_enable_seq &rArr; rs_ctl_write_reg &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_reg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_SRST
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_seq
</UL>

<P><STRONG><a name="[d2]"></a>rs_ctl_cmd_shutdown</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rs_ctl_cmd.o(i.rs_ctl_cmd_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rs_ctl_cmd_shutdown &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRST_OFF
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CE_OFF
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_open
</UL>

<P><STRONG><a name="[9e]"></a>rs_ctl_cmd_wait_and_get_sensor_data</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, rs_ctl_distance.o(i.rs_ctl_cmd_wait_and_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rs_ctl_cmd_wait_and_get_sensor_data &rArr; read_register &rArr; rs_ctl_read_reg &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_status
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_devdata
</UL>

<P><STRONG><a name="[d3]"></a>rs_ctl_dev_read</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, rs_ctl_dev.o(i.rs_ctl_dev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NSS_HIGH
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TxData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_RxData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NSS_LOW
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_reg
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_RDSR
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_read_region
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_RDSR2
</UL>

<P><STRONG><a name="[da]"></a>rs_ctl_dev_write</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rs_ctl_dev.o(i.rs_ctl_dev_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NSS_HIGH
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TxData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NSS_LOW
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_reg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_WRSR
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_regs
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_fast_control
</UL>

<P><STRONG><a name="[db]"></a>rs_ctl_op_DSLEEP</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rs_ctl_dev.o(i.rs_ctl_op_DSLEEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rs_ctl_op_DSLEEP &rArr; rs_ctl_op_fast_control &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_fast_control
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_start_body
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_param
</UL>

<P><STRONG><a name="[dd]"></a>rs_ctl_op_ENATM</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rs_ctl_dev.o(i.rs_ctl_op_ENATM))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rs_ctl_op_ENATM &rArr; rs_ctl_op_fast_control &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_fast_control
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_start_body
</UL>

<P><STRONG><a name="[c0]"></a>rs_ctl_op_HLDDT</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rs_ctl_dev.o(i.rs_ctl_op_HLDDT))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rs_ctl_op_HLDDT &rArr; rs_ctl_op_fast_control &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_fast_control
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register
</UL>

<P><STRONG><a name="[de]"></a>rs_ctl_op_RDSR</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rs_ctl_dev.o(i.rs_ctl_op_RDSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rs_ctl_op_RDSR &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_start_body
</UL>

<P><STRONG><a name="[c4]"></a>rs_ctl_op_RDSR2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rs_ctl_dev.o(i.rs_ctl_op_RDSR2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rs_ctl_op_RDSR2 &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_status
</UL>

<P><STRONG><a name="[df]"></a>rs_ctl_op_RUNTM</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rs_ctl_dev.o(i.rs_ctl_op_RUNTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rs_ctl_op_RUNTM &rArr; rs_ctl_op_fast_control &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_fast_control
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_start_body
</UL>

<P><STRONG><a name="[ca]"></a>rs_ctl_op_SRST</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rs_ctl_dev.o(i.rs_ctl_op_SRST))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rs_ctl_op_SRST &rArr; rs_ctl_op_fast_control &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_fast_control
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_enable_seq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_boot
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_start_body
</UL>

<P><STRONG><a name="[c2]"></a>rs_ctl_op_UPDDT</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rs_ctl_dev.o(i.rs_ctl_op_UPDDT))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rs_ctl_op_UPDDT &rArr; rs_ctl_op_fast_control &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_fast_control
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register
</UL>

<P><STRONG><a name="[e0]"></a>rs_ctl_op_WRSR</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rs_ctl_dev.o(i.rs_ctl_op_WRSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rs_ctl_op_WRSR &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_start_body
</UL>

<P><STRONG><a name="[dc]"></a>rs_ctl_op_fast_control</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rs_ctl_dev.o(i.rs_ctl_op_fast_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rs_ctl_op_fast_control &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_SRST
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_RUNTM
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_ENATM
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_DSLEEP
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_UPDDT
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_HLDDT
</UL>

<P><STRONG><a name="[bc]"></a>rs_ctl_op_read_region</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, rs_ctl_dev.o(i.rs_ctl_op_read_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rs_ctl_op_read_region &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo
</UL>

<P><STRONG><a name="[c1]"></a>rs_ctl_read_reg</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rs_ctl_dev.o(i.rs_ctl_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rs_ctl_read_reg &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_to_uint32
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_boot
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_seq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register
</UL>

<P><STRONG><a name="[8f]"></a>rs_ctl_read_regs</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, rs_ctl_dev.o(i.rs_ctl_read_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rs_ctl_read_regs &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NSS_HIGH
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint8_to_uint32
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_uint8
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TxData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_RxData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NSS_LOW
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_point_per_chirp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range_peak
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modify_write_reg
</UL>

<P><STRONG><a name="[a0]"></a>rs_ctl_sensor_data_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rs_ctl_distance.o(i.rs_ctl_sensor_data_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rs_ctl_sensor_data_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_devdata
</UL>

<P><STRONG><a name="[9d]"></a>rs_ctl_sensor_data_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rs_ctl_distance.o(i.rs_ctl_sensor_data_init))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_devdata
</UL>

<P><STRONG><a name="[e3]"></a>rs_ctl_write_mem</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rs_ctl_dev.o(i.rs_ctl_write_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rs_ctl_write_mem &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_write
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_seq
</UL>

<P><STRONG><a name="[e4]"></a>rs_ctl_write_mem_seq</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, rs_ctl_dev.o(i.rs_ctl_write_mem_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rs_ctl_write_mem_seq &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NSS_HIGH
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_TxData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NSS_LOW
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_seq
</UL>

<P><STRONG><a name="[cb]"></a>rs_ctl_write_reg</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rs_ctl_dev.o(i.rs_ctl_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rs_ctl_write_reg &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_uint8
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_enable_seq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_disable_seq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_boot
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_start_body
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_seq
</UL>

<P><STRONG><a name="[be]"></a>rs_ctl_write_regs</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, rs_ctl_dev.o(i.rs_ctl_write_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rs_ctl_write_regs &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32_to_uint8
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_write
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modify_write_reg
</UL>

<P><STRONG><a name="[e5]"></a>rs_get_distance</STRONG> (Thumb, 50 bytes, Stack size 104 bytes, rs_ctl_distance.o(i.rs_get_distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rs_get_distance &rArr; get_distance_data &rArr; conv_power &rArr; __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance_data
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_devdata
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMain
</UL>

<P><STRONG><a name="[e6]"></a>rs_load_seq_code</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rs_ctl_setup.o(i.rs_load_seq_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rs_load_seq_code &rArr; rs_setup_seq &rArr; rs_ctl_read_reg &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_boot
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_param
</UL>

<P><STRONG><a name="[e8]"></a>rs_open</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rs_ctl_base.o(i.rs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rs_open &rArr; rs_ctl_cmd_boot &rArr; rs_ctl_read_reg &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_shutdown
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_boot
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMain
</UL>

<P><STRONG><a name="[97]"></a>rs_setup_beta</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rs_ctl_distance.o(i.rs_setup_beta))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rs_setup_beta &rArr; read_modify_write_reg &rArr; rs_ctl_write_regs &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modify_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distance_wide_update_param
</UL>

<P><STRONG><a name="[94]"></a>rs_setup_getcode</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rs_ctl_setup.o(i.rs_setup_getcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rs_setup_getcode &rArr; _table_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_table_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distance_wide_get
</UL>

<P><STRONG><a name="[98]"></a>rs_setup_hpf</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rs_ctl_setup.o(i.rs_setup_hpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rs_setup_hpf &rArr; read_modify_write_reg &rArr; rs_ctl_write_regs &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modify_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distance_wide_update_param
</UL>

<P><STRONG><a name="[96]"></a>rs_setup_interval</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rs_ctl_setup.o(i.rs_setup_interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rs_setup_interval &rArr; read_modify_write_reg &rArr; rs_ctl_write_regs &rArr; rs_ctl_dev_write &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modify_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distance_wide_update_param
</UL>

<P><STRONG><a name="[eb]"></a>rs_setup_param</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rs_ctl_setup.o(i.rs_setup_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rs_setup_param &rArr; rs_update_param_local &rArr; distance_wide_update_param &rArr; rs_setup_range_peak &rArr; rs_setup_range &rArr; _point_per_chirp &rArr; __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_DSLEEP
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_update_param_local
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_param_local
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_load_seq_code
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMain
</UL>

<P><STRONG><a name="[ec]"></a>rs_setup_param_local</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rs_ctl_setup.o(i.rs_setup_param_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rs_setup_param_local &rArr; distance_wide_get &rArr; rs_setup_getcode &rArr; _table_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distance_wide_get
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_param
</UL>

<P><STRONG><a name="[ee]"></a>rs_setup_range</STRONG> (Thumb, 372 bytes, Stack size 144 bytes, rs_ctl_setup.o(i.rs_setup_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rs_setup_range &rArr; _point_per_chirp &rArr; __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_point_per_chirp
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_effective_chirp_bandwidth
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_modify_write_reg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range_peak
</UL>

<P><STRONG><a name="[99]"></a>rs_setup_range_peak</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, rs_ctl_distance.o(i.rs_setup_range_peak))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rs_setup_range_peak &rArr; rs_setup_range &rArr; _point_per_chirp &rArr; __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_range
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distance_wide_update_param
</UL>

<P><STRONG><a name="[e7]"></a>rs_setup_seq</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, rs_ctl_setup.o(i.rs_setup_seq))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rs_setup_seq &rArr; rs_ctl_read_reg &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_reg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_enable_seq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_disable_seq
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_reg
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_expected_crc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem_seq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_load_seq_code
</UL>

<P><STRONG><a name="[ef]"></a>rs_start_body</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rs_ctl_base.o(i.rs_start_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rs_start_body &rArr; rs_ctl_op_RDSR &rArr; rs_ctl_dev_read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_reg
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_WRSR
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_SRST
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_RUNTM
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_RDSR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_ENATM
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_op_DSLEEP
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMain
</UL>

<P><STRONG><a name="[ed]"></a>rs_update_param_local</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rs_ctl_setup.o(i.rs_update_param_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rs_update_param_local &rArr; distance_wide_update_param &rArr; rs_setup_range_peak &rArr; rs_setup_range &rArr; _point_per_chirp &rArr; __hardfp_round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distance_wide_update_param
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_param
</UL>

<P><STRONG><a name="[4e]"></a>taskMain</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, main.o(i.taskMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = taskMain &rArr; rs_get_distance &rArr; get_distance_data &rArr; conv_power &rArr; __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_start_body
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_param
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_open
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_get_distance
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[e2]"></a>uint32_to_uint8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, general.o(i.uint32_to_uint8))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_reg
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_regs
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
</UL>

<P><STRONG><a name="[e1]"></a>uint8_to_uint32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, general.o(i.uint8_to_uint32))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_reg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
</UL>

<P><STRONG><a name="[aa]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[b5]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[b3]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[ac]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[ab]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[a5]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[a7]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[b1]"></a>vPortFree</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[f3]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c8]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_chipinit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_shutdown
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_cmd_boot
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_start_body
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_setup_seq
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_write_mem_seq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_read_regs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_write
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_ctl_dev_read
</UL>

<P><STRONG><a name="[a8]"></a>vTaskStartScheduler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[53]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[f2]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[a6]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[ba]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[78]"></a>SetSysClock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_at32f4xx.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[92]"></a>conv_power</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, rs_ctl_distance.o(i.conv_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = conv_power &rArr; __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance_data
</UL>

<P><STRONG><a name="[a2]"></a>distance_range</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rs_ctl_distance.o(i.distance_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = distance_range
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_distance_data
</UL>

<P><STRONG><a name="[b8]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[b9]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[4f]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[a9]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[ad]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[af]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[b0]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[50]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[b2]"></a>prvInitialiseNewTask</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[ae]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[f6]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[7e]"></a>_printf_core</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$1
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
